import util

class MarkdownConverter {

    public function convert(lines: [String]) throws -> String {
        let filename = "test.md"

        mut lines = readToLines(filename: filename)
        lines.push("")

        mut activeLines: [String] = []
        mut skipNextLine = false
        mut inBlockQuote = false

        mut tagStack: [String] = []

        for l in lines {
            mut line = l
            // println("line: {}", line)

            if skipNextLine {
                skipNextLine = false
                continue
            }

            // Blockquote
            if inBlockQuote == false and l.starts_with("> ") {
                inBlockQuote = true
                println("<blockquote>")
            }

            if inBlockQuote and l.starts_with(">") {
                if line.starts_with("> ") {
                    line = line.substring(start: 2, length: line.length() - 2)
                } else if line.starts_with(">") {
                    line = line.substring(start: 1, length: line.length() - 1)
                }
            }

            // println("line: |{}|", line)

            // Paragraph
            if line == "" {
                println("<p>{}</p>", join(strings: activeLines, separator: " "))
                println()
                activeLines = []
            } else if line.starts_with("=") {
                println("<h1>{}</h1>", activeLines[0])
                println()
                activeLines = []
                skipNextLine = true
            } else if line.starts_with("-") {
                println("<h2>{}</h2>", activeLines[0])
                println()
                activeLines = []
                skipNextLine = true
            } else if line.starts_with("#") {

                mut count = 0

                loop {
                    if line.substring(start: count as! usize, length: 1) == "#" {
                        count++
                        continue
                    }

                    break
                }

                println(
                    "<h{}>{}</h{}>"
                    count
                    line.substring(start: (count + 1) as! usize, length: line.length() - ((count + 1) as! usize))
                    count
                )
                println()
                activeLines = []
                skipNextLine = true
            } else {
                activeLines.push(linkify(line))
            }

            if inBlockQuote and l.starts_with(">") == false {
                inBlockQuote = false
                println("</blockquote>\n", line)
            }
        }

        return ""
    }

    function linkify(line: String) throws -> String {
        mut outLine = line
        mut nameStart: usize? = None
        mut nameEnd: usize? = None
        mut linkStart: usize? = None
        mut linkEnd: usize? = None

        for i in 0..line.length() {
            let c = line.byte_at(i)

            if c == b'[' {
                // println("found possible link name start")
                nameStart = i
            }
            if c == b']' {
                // println("found possible link name end")
                nameEnd = i
            }
            if c == b'(' {
                // println("found possible link addr start")
                linkStart = i
            }
            if c == b')' {
                // println("found possible link addr end")
                linkEnd = i
            }

            if nameStart.has_value() and nameEnd.has_value() and linkStart.has_value() and linkEnd.has_value() {
                let name = line.substring(start: nameStart! + 1, length: nameEnd! - nameStart! - 1)
                let link = line.substring(start: linkStart! + 1, length: linkEnd! - linkStart! - 1)
                let linkHTML = String::format("<a href=\"{}\">{}</a>", link, name)
                let substringToReplace = line.substring(start: nameStart!, length: linkEnd! - nameStart! + 1)
                outLine = outLine.replace(replace: substringToReplace, with: linkHTML)
                nameStart = None
                nameEnd = None
                linkStart = None
                linkEnd = None
            }
        }

        return outLine
    }
}